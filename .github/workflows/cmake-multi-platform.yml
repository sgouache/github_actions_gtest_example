# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        #c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            preset: windows-msvc-release
          - os: ubuntu-latest
            preset: linux-gcc-release

          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@v1.1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: cmake --preset ${{ matrix.preset }} -DCMAKE_BUILD_TYPE=Release 

    - name: Build
      run: cmake --build --parallel --preset ${{ matrix.preset }}

    - name: Test
      run: ctest --output-on-failure -V --preset ${{ matrix.preset }}
